% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jitter.R
\name{od_jitter}
\alias{od_jitter}
\title{Move desire line end points within zone to avoid all trips going to a single centroid}
\usage{
od_jitter(od, z, subpoints = NULL)
}
\arguments{
\item{od}{An origin-destination data frame}

\item{z}{Zones representing origins and destinations}

\item{subpoints}{Points within the zones defining the OD data start/end points}
}
\value{
An \code{sf} data frame
}
\description{
These functions tackle the problem associated with OD data representing movement to and from large zones.
Typically the associated desire lines start and end in one point per zone.
This function produces desire lines that can start and end anywhere (or at predefined points) within each zone.
See \href{https://github.com/ITSLeeds/od/issues/11}{issue #11} for details.
}
\examples{
od = od_data_df
z = od_data_zones_min
desire_lines_rand = od_jitter(od, z)
desire_lines = od_to_sf(od, z)
plot(z$geometry)
plot(desire_lines_rand$geometry, add = TRUE)
plot(desire_lines, add = TRUE)
# # Test interactively with
# mapview::mapview(desire_lines) + desire_lines_rand + z
subpoints = sf::st_sample(z, 100)
desire_lines_rand2 = od_jitter(desire_lines, z, subpoints)
plot(z, reset = FALSE)
plot(subpoints, add = TRUE)
plot(desire_lines_rand2$geometry, add = TRUE)
# # larger example with only subset of matching zones
# od = od_data_df_medium
# od_sf = od_to_sf(od, od_data_zones)
# desire_lines_rand3 = od_jitter(od_sf, z)
# plot(od_sf$geometry[od$all > 200])
# plot(desire_lines_rand3$geometry[od$all > 200])
}
